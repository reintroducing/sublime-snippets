<snippet>
    <content><![CDATA[
import isFunction from 'lodash/isFunction';
import isUndefined from 'lodash/isUndefined';
import React, {Component} from 'react';
import PropTypes from 'prop-types';

export default EnhancedComponent => {
    return class ${1:ComponentName} extends Component {
        static propTypes = {

        };
        static defaultProps = {

        };

        constructor(props) {
            super(props);

            this._isStateful = !isUndefined(EnhancedComponent.prototype.render);
        }

        getWrappedInstance() {
            if (isFunction(this._wrappedInstance.getWrappedInstance)) {
                // check to see if this is also wrapped by connect and if so get that instance instead
                // for this to work your connect has to have withRef
                // connect(mapStateToProps, mapDispatchToProps, null, {withRef: true})
                return this._wrappedInstance.getWrappedInstance();
            } else {
                return this._wrappedInstance;
            }
        }

        render() {
            const allProps = {
                ...this.props,
                ${2}
            };

            if (this._isStateful) {
                allProps.ref = node => { this._wrappedInstance = node; };
            }

            return (
                <EnhancedComponent
                    {...allProps}
                />
            );
        }
    };
};
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>hoc7</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <!-- <scope>source.js</scope> -->
</snippet>
